{"version":3,"sources":["spider/index.js","App.js","index.js"],"names":["thisTimer","cardTopBase","imgWidth","imgHeight","postCardLeft","postCardTop","clickMore","cardIndex","firstShowNum","cardPacks","tenArr","thisTime","score","onceError","successTimes","moveTimes","hardLevelObj","1","name","packs","4","8","16","32","getOriginCardTable","originCardTable","i","getCards","num","res","_list","concat","shuffleCard","sort","Math","random","addZero","x","length","getLeft","getTop","SpiderCard","props","fitMobile","document","documentElement","offsetHeight","offsetWidth","body","spiderContainer","getElementsByClassName","spiderWrap","style","transform","transformOrigin","position","left","width","height","maxHeight","padding","thisHeight","minHeight","getPostCardPos","wholeWidth","wholeHeight","wrapPaddingLeft","getOriginData","selectedHardLevel","state","originData","map","item","push","show","cardNum","setState","dealing","initDealCard","timer","hour","parseInt","min","sec","useTime","cardTable","_cardTable","cloneDeep","setInterval","thisLine","thisIndex","floor","newList","onDealCard","cardId","index","setTimeout","dealInterval","onShowMoreCard","selectedObj","onRealShowMoreCard","_originData","line","a","getElementById","zIndex","top","setAttribute","getCardNum","thisNum","onBindClick","e","target","classList","dataset","type","id","replace","contains","onChangeActiveCSS","Object","values","beforeSelectedLine","keys","onChangeSelectedObj","selectedLine","onChangeCardTable","message","error","duration","_selectedObj","flag","ids","b","forEach","remove","add","selectedFirstIndex","cutNums","thisId","splice","selectedLineLen","checkComplete","annimationDuration","thisLen","success","judgeSelectedCss","idx","isSelected","indexes","includes","isSelectedOne","isSelectedTop","isSelectedBottom","isSelectedSide","onPause","paused","clearInterval","onSetHardLevel","level","originLevel","Modal","confirm","title","cancelText","okText","onOk","onReset","onChangeHardLevel","indexOf","this","addEventListener","thisStyle","isMobile","userAgentInfo","navigator","userAgent","Agents","v","isPC","menu","Item","onClick","key","className","classNames","shape","size","overlay","placement","overlayClassName","ref","paddingTop","paddingLeft","PauseCircleOutlined","data-line","data-index","_item","data-type","transition","React","PureComponent","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.3c945f69.chunk.js","sourcesContent":["import React from 'react'\nimport { message, Button, Dropdown, Menu, Modal } from 'antd'\nimport { cloneDeep } from 'lodash'\nimport classNames from 'classnames'\nimport { \n  PauseCircleOutlined,\n} from '@ant-design/icons';\nimport './index.scss'\n\nlet cardTopBase = 20 // 每一列牌的向下偏移\nlet cardLeftBase = 10  // 每一列牌的向右偏移\nconst wrapPaddingTop = 8 // 背景paddingTop值\nconst wrapPaddingLeft = 16 // 背景paddingLeft值\n\nlet imgWidth = 80 // 图片宽度\nconst imgWHRatio = 180 / 250 // 图片宽高比\nlet imgHeight = imgWidth / imgWHRatio // 图片高度\nconst dealInterval = 0.05 // 发一张牌用的时间\nconst annimationDuration = 0.3 // 牌移动动画时间\n\nconst postCardMarLeft = 8 // 发牌处距离主体的横向距离\nlet postCardLeft = 1000 // 发牌时牌的初始left\nlet postCardTop = 1000 // 发牌时牌的初始top\n\nlet clickMore = 0 // 点击发牌次数\nlet cardIndex = 0 // 展示了多少牌\n\nlet firstShowNum = 54 // 一开始发多少张牌\nlet cardPacks = 8 // 几副牌\n\nconst tenArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconst originUseTime = '00:00'\nlet thisTime = 0 // 所用时间\nlet thisTimer // 记时器\nlet score = (cardPacks / 2) * 100 // 分数\nconst originHardLevel = 8 //  默认难度\nlet onceError = false // 犯过一次错误\nlet successTimes = 0 // 胜利次数\nlet moveTimes = 0\n/**\n * 难度设计：\n * 1：2副牌\n * 4：4副牌\n * 8：8副牌\n * 16：8副牌洗两次\n * 32：8副牌洗四次\n */\nconst hardLevelObj = {\n  1: {\n    name: '大白',\n    packs: 2,\n    firstShowNum: 16,\n    score: 100\n  },\n  4: {\n    name: '入门',\n    packs: 4,\n    firstShowNum: 22,\n    score: 200\n  },\n  8: {\n    name: '普通',\n    packs: 8,\n    firstShowNum: 54,\n    score: 500\n  },\n  16: {\n    name: '困难',\n    packs: 8,\n    firstShowNum: 54,\n    score: 500\n  },\n  32: {\n    name: '专家',\n    packs: 8,\n    firstShowNum: 54,\n    score: 500\n  },\n}\n\n// 获取10列空的数组\nconst getOriginCardTable = () => {\n  let originCardTable = []\n  for (let i = 0; i < 10; i++) {\n    originCardTable[i] = []\n  }\n  return originCardTable\n}\n\n// 获取几副牌\nconst getCards = (num = 1) => {\n  let res = []\n  let _list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  for (let i = 0; i < num; i++) {\n    res = res.concat(_list)\n  }\n  return res\n}\n\n// 洗牌\nconst shuffleCard = (_list) => {\n  _list.sort(() => {\n    return Math.random() > 0.5 ? 1 : -1\n  })\n  return _list\n}\n\nconst addZero = (x) => {\n  if (('' + x).length === 1) {\n    return '0' + x\n  }\n  return x\n}\n\n// 判断是否是PC端\nfunction isPC() {\n  var userAgentInfo = navigator.userAgent;\n  var Agents = [\"Android\", \"iPhone\",\n              \"SymbianOS\", \"Windows Phone\",\n              \"iPad\", \"iPod\"];\n  var flag = true;\n  for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n          flag = false;\n          break;\n      }\n  }\n  return flag;\n}\n\n\n// 根据列获取每张牌的left值\nconst getLeft = (i) => {\n  return (cardLeftBase + imgWidth) * i + wrapPaddingLeft\n}\n\n// 根据行获取每张牌的top值\nconst getTop = (i) => {\n  return cardTopBase * i  + wrapPaddingTop\n}\n\n\n/**\n * 蜘蛛纸牌\n * \n * 关键数据格式：\n * originData: [{ cardNum: 1, show: true  }]\n * 牌的id是其索引值, 从0到103\n * \n * cardTable: [ { cardId: 1, index:  1, cardNum: 1 } ]\n * 牌的id编号，所在行，牌的真实数字，其索引值是所在列line\n * \n * selectedObj: { line: [ { cardId: 1, index: 1, cardNum: 1 }, { cardId: 3, index: 3, cardNum: 3 } ] }\n */\nclass SpiderCard extends React.PureComponent{\n  constructor(props) {\n    super(props) \n    \n    this.state = {\n      cardTable: getOriginCardTable(), // 只有展示中的数据，二维\n      selectedObj: {}, // 选中的牌的列和行信息\n      originData: [], // 全部数据，一维\n      dealing: false, // 是否正在发牌\n      useTime: originUseTime,\n      selectedHardLevel: originHardLevel,\n    }\n    document.title = '蜘蛛纸牌'\n  }\n\n  componentDidMount() {\n    this.fitMobile()\n    this.getPostCardPos()\n    this.getOriginData()\n    this.spiderWrap.addEventListener('click', this.onBindClick)\n  }\n\n  fitMobile = () => {\n    const { offsetHeight, offsetWidth } = document.documentElement\n    if (offsetHeight > offsetWidth) {\n      const body = document.body\n      const spiderContainer = document.getElementsByClassName('spider-container')[0]\n      const spiderWrap = document.getElementsByClassName('spider-wrap')[0]\n\n      cardTopBase = 12\n      body.style.transform = `rotate(90deg)`\n      body.style.transformOrigin = '0% 0%'\n      body.style.position = 'relative'\n      body.style.left = '100%'\n      body.style.width = `100vh`\n      body.style.height = `100vw`\n\n      spiderContainer.style.maxHeight = '100vw'\n      spiderContainer.style.padding = '10px 10px'\n      \n      let thisHeight = offsetWidth - 24 - 30\n      if (thisHeight < 370) thisHeight = 370\n      spiderWrap.style.minHeight = `${thisHeight}px`\n    }\n  }\n\n  getPostCardPos =  () => {\n    const wholeWidth = this.spiderWrap.offsetWidth\n    const wholeHeight = this.spiderWrap.offsetHeight\n    // 重新计算每列牌的间距\n    imgWidth = (wholeWidth - wrapPaddingLeft * 2  - 9 * cardLeftBase) / 10\n    imgHeight = imgWidth / imgWHRatio\n    // 重新计算发牌位置\n    postCardLeft = wholeWidth - postCardMarLeft - imgWidth\n    postCardTop = wholeHeight - imgHeight - 10\n  }\n\n  getOriginData = () => {\n    const { selectedHardLevel} = this.state\n    let originData = []\n    let _list = []\n    let res = [];\n    ({ packs: cardPacks, firstShowNum, score } = hardLevelObj[selectedHardLevel])\n    if (selectedHardLevel == 1 ) {\n      // 每1副牌单独洗\n      _list = getCards(1)\n      for (let i = 0; i < 2; i ++) {\n        shuffleCard(_list) \n        res = res.concat(_list)\n      }\n    } else if (selectedHardLevel == 4) {\n      _list = getCards(1)\n      for (let i = 0; i < 4; i ++) {\n        shuffleCard(_list) \n        res = res.concat(_list)\n      }\n    } else if (selectedHardLevel == 8) {\n      _list = getCards(8)\n      shuffleCard(_list) \n      res = res.concat(_list)\n    } else if (selectedHardLevel == 16) {\n      _list = getCards(8)\n      for (let i = 0; i < 2; i++) {\n        shuffleCard(_list) \n      }\n      res = res.concat(_list)\n    } else if (selectedHardLevel == 32) {\n      _list = getCards(8)\n      for (let i = 0; i < 4; i++) {\n        shuffleCard(_list) \n      }\n      res = res.concat(_list)\n    }\n    res.map(item => {\n      originData.push({\n        show: false,\n        cardNum: item\n      })\n    })\n    this.setState({\n      originData,\n      dealing: true\n    }, () => {\n      this.initDealCard()\n    })\n  }\n\n  //定时函数，每一秒执行一次\n  timer = () => {\n    thisTime += 1;//一秒钟加一，单位是秒\n    let hour = parseInt(thisTime / 3600)\n    let min = parseInt(thisTime / 60);//把秒转换为分钟，一分钟60秒，取商就是分钟\n    let sec = thisTime % 60;//取余就是秒\n    hour = addZero(hour)\n    min = addZero(min)\n    sec = addZero(sec)\n    const res = hour === '00' ?  `${min}:${sec}` : `${hour}:${min}:${sec}`\n    this.setState({\n      useTime: res\n    })\n  }\n\n  // 初始化的发牌\n  initDealCard = () => {\n    const { originData, cardTable } = this.state\n    let _cardTable =  cloneDeep(cardTable)\n    if (cardIndex > firstShowNum - 1) {\n      this.setState({\n        dealing: false,\n      })\n      //启动定时\n      thisTimer = setInterval(this.timer, 1000);\n      return\n    }\n    const thisLine = cardIndex % 10\n    const thisIndex = Math.floor(cardIndex / 10)\n\n    if (cardIndex >= firstShowNum - 10) {\n      let newList = cloneDeep(originData)\n      newList[cardIndex].show = true\n      this.setState({\n        originData: newList\n      }, () => {\n        this.onDealCard(cardIndex, thisLine, thisIndex)\n      })\n    } else {\n      this.onDealCard(cardIndex, thisLine, thisIndex)\n    }\n    \n    _cardTable[cardIndex%10].push({\n      cardId: cardIndex,\n      index: Math.floor(cardIndex / 10),\n      cardNum: originData[cardIndex].cardNum,\n    })\n    cardIndex += 1\n\n    this.setState({\n      cardTable: _cardTable,\n    })\n    setTimeout(() => {\n      this.initDealCard()\n    }, dealInterval * 1000)\n\n\n  }\n\n  // 继续发牌\n  onShowMoreCard = () => {\n    const { dealing } = this.state\n    if (dealing) return\n    this.setState({\n      dealing: true,\n      selectedObj: {},\n    })\n\n    clickMore += 1\n    this.onRealShowMoreCard()\n    \n  }\n\n  // 实际继续发牌\n  onRealShowMoreCard = () => {\n    const { originData, cardTable } = this.state\n    let _cardTable = cloneDeep(cardTable)\n    let _originData = cloneDeep(originData)\n    if (cardIndex >= clickMore * 10 + firstShowNum || cardIndex > cardPacks * 13 - 1) {\n      this.setState({\n        dealing: false,\n      })\n      return\n    }  \n    const thisLine = cardIndex % 10\n    const thisIndex = _cardTable[thisLine].length\n    _cardTable[thisLine].push({\n      cardId: cardIndex,\n      index: thisIndex,\n      cardNum: _originData[cardIndex].cardNum,\n    })\n\n    _originData[cardIndex].show = true\n    \n    this.setState({\n      originData: _originData,\n      cardTable: _cardTable,\n    }, () => {\n      this.onDealCard(cardIndex, thisLine, thisIndex)\n      cardIndex += 1\n    })\n\n    setTimeout(() => {\n      this.onRealShowMoreCard()\n    }, dealInterval * 1000)\n  }\n\n  onDealCard = (cardId, line, index) => {\n    const a = document.getElementById(`card-v${cardId}`)\n    if (a) {\n      a.style.zIndex = index + moveTimes * 30\n      a.style.left = getLeft(line) + 'px'\n      a.style.top = getTop(index) + 'px'\n      a.setAttribute('data-line', line)\n      a.setAttribute('data-index', index)\n      a.setAttribute('data-type', '')\n      moveTimes += 1\n    }\n  }\n\n  // 从cardTable中获取牌的数字\n  getCardNum = (line, index) => {\n    const { cardTable } = this.state\n    let thisNum = -1\n    if (cardTable[line] && cardTable[line][index]) {\n      thisNum = (cardTable[line][index] && cardTable[line][index]['cardNum']) || -1\n    }\n    return thisNum\n  }\n\n  /**\n   * 绑定点击事件，要做两件事，改变cardTable或者selectedObj\n   * 之前有选中，分为三种：点击的是空列、相同列、其他列，点击相同列分为点击相同牌、不同牌\n   * 之前没有选中，\n   */\n  onBindClick = (e) => {\n    const { classList, dataset: { line, index, type }, id } = e.target\n    const { cardTable, selectedObj, dealing, originData } = this.state\n    if (type === 'origin') {\n      this.onShowMoreCard() \n      return\n    }\n    const cardId = id.replace('card-v', '')\n    if (dealing) return\n    // 点击其他地方，取消选择\n    if (!classList.contains('card') && !classList.contains('card-bg')) {\n      this.onChangeActiveCSS()\n      this.setState({\n        selectedObj: {},\n      })\n      return\n    } \n    if (index != -1 && (!originData[cardId] || !originData[cardId]['show'])) return \n    const thisLine = cardTable[line]\n    \n    // 之前有选中\n    if (Object.values(selectedObj).length) {\n      const beforeSelectedLine = Object.keys(selectedObj)[0]\n      // 点击的是空列\n      if (!cardTable[line].length && index == -1) {\n        this.onChangeCardTable(line, id)\n        \n      } else if (beforeSelectedLine == line) {\n        // 点击的是相同列\n        if (selectedObj[beforeSelectedLine].length === 1 && selectedObj[beforeSelectedLine][0].index == index) {\n          // 点击的是同一张牌\n          this.setState({\n            selectedObj: {},\n          })\n          this.onChangeActiveCSS()\n        } else {\n          this.onChangeSelectedObj(line, index, id) \n        }\n\n      } else if (+index == thisLine.length - 1) {\n        // 点击其他列的最后一个，说明是要添加\n        const selectedLine = Object.keys(selectedObj)[0]\n\n        // 满足条件\n        if ( cardTable[line][index].cardNum - 1 ===  selectedObj[selectedLine][0].cardNum) {\n          this.onChangeCardTable(line, selectedLine)\n        } else {\n          // 没犯过错误\n          if (!onceError) {\n            message.error('不能移动到那儿', { duration: 1 })\n            onceError = true\n          } else {\n            // 犯过错误\n            this.onChangeSelectedObj(line, index, id) \n            onceError = false\n          }\n        }\n      } else {\n        // 点击的是其他列，但不是最后一个\n        this.onChangeSelectedObj(line, index, id) \n      }\n    } else {\n      // 之前未选中过\n      this.onChangeSelectedObj(line, index, id) \n    }\n  }\n\n  // 改变选中的牌\n  onChangeSelectedObj = (line, index, id) => {\n    if (index == -1) return\n    const { cardTable } = this.state\n    const thisLine = cardTable[line]\n    if (!thisLine) return \n\n    let _selectedObj = {}\n    if (thisLine.length === +index + 1) {\n      // 当前点击的是本列的最后一个\n      _selectedObj[line] = [\n        {\n          index: thisLine[index].index,\n          cardId: thisLine[index].cardId,\n          cardNum: thisLine[index].cardNum\n      }]\n      this.onChangeActiveCSS([ id ])\n     \n    } else {\n      // 当前点击的不是本列的最后一个\n      let flag = true\n      for (let i = thisLine.length - 1; i >= +index+1; i--) {\n        // 有一个不是下面比上面小1\n        if (thisLine[i]['cardNum'] !== thisLine[i - 1]['cardNum'] - 1) {\n          flag = false\n        }\n      }\n      if (flag) {\n        _selectedObj[line] = []\n        const ids = []\n        for(let i = +index; i < thisLine.length; i++) {\n          const cardId = thisLine[i].cardId\n          ids.push(`card-v${cardId}`)\n          _selectedObj[line].push({\n            index: thisLine[i].index,\n            cardId,\n            cardNum: thisLine[i].cardNum\n          })\n        }\n        this.onChangeActiveCSS(ids)\n      }\n    }\n    this.setState({\n      selectedObj: _selectedObj,\n    })\n  }\n\n  onChangeActiveCSS = (ids = []) => {\n    let b = document.getElementsByClassName('active')\n    b = [...b]\n    b.forEach(item => {\n      item.classList.remove('active')\n    })\n    for (let i = 0; i < ids.length; i++) {\n      const a = document.getElementById(ids[i])\n      \n      if (a) {\n        a.classList.add('active')\n      }\n    }\n  }\n\n  // 改变cardTable数组\n  onChangeCardTable = (line) => {\n    const { selectedObj, cardTable, originData } = this.state\n    const selectedLine = Object.keys(selectedObj)[0]\n    const _cardTable = cloneDeep(cardTable)\n    const _originData = cloneDeep(originData)\n    \n    // 选中的列中的第一张牌\n    const selectedFirstIndex = selectedObj[selectedLine][0].index\n\n    let cutNums = []\n    for (let i = 0; i < selectedObj[selectedLine].length; i++) {\n      const thisId = selectedObj[selectedLine][i].cardId\n      const thisIndex = i + cardTable[line].length\n      cutNums.push({\n        index: thisIndex,\n        cardId: thisId,\n        cardNum: selectedObj[selectedLine][i].cardNum\n      })\n      this.onDealCard(thisId, line, thisIndex)\n    }\n    \n    _cardTable[line].push( ...cutNums )\n    _cardTable[selectedLine].splice(selectedFirstIndex, selectedObj[selectedLine].length)\n    const selectedLineLen = _cardTable[selectedLine].length\n    score -= 1\n    // 将移走的那一列的最后一个显示出来\n    if (selectedLineLen && _originData[_cardTable[selectedLine][selectedLineLen - 1].cardId].show === false) {\n      _originData[_cardTable[selectedLine][selectedLineLen - 1].cardId].show = true\n    }\n    this.onChangeActiveCSS()\n    this.setState({\n      cardTable: _cardTable,\n      originData: _originData,\n      selectedObj: {}\n    })\n    setTimeout(() => {\n      this.checkComplete(line)\n    }, annimationDuration * 1000)\n  }\n\n  // 检查是否完成一组\n  checkComplete = (line) => {\n    const { cardTable, originData } = this.state\n    const total = 13\n    if (!cardTable[line] || cardTable[line].length < total) return\n    \n    const thisLen = cardTable[line].length\n    let flag = true\n    for (let i = thisLen - 1; i > thisLen - total; i--) {\n      const cardId = cardTable[line][i].cardId\n      if (cardTable[line][i].cardNum !== cardTable[line][i - 1].cardNum - 1 || !originData[cardId] || !originData[cardId]['show'] ){\n        flag = false\n      }\n    }\n    if (flag) {\n      let _originData = cloneDeep(originData)\n      let _cardTable = cloneDeep(cardTable)\n      \n      for (let i = thisLen - 1; i >= thisLen - total; i--) {\n        const cardId = cardTable[line][i].cardId\n        const a = document.getElementById(`card-v${cardId}`)\n        if (a) {\n          a.style.left = 10 + successTimes * 16 + 'px'\n          a.style.top = postCardTop + 'px'\n          a.style.zIndex = 1000 + successTimes * 13- cardTable[line][i].cardNum\n        }\n      }\n      successTimes += 1\n      _cardTable[line].splice(thisLen - total, total)\n      if (_cardTable[line].length) {\n        const cardId = _cardTable[line][_cardTable[line].length - 1].cardId\n        _originData[cardId].show = true\n      }\n      score += 100\n      if (successTimes === cardPacks) {\n        message.success('恭喜你，顺利通关！')\n      } else {\n        message.success('继续努力💪！')\n      }\n\n      this.setState({\n        cardTable: _cardTable,\n        originData: _originData\n      })\n    }\n  }\n\n  judgeSelectedCss = (index, idx) => {\n    const { selectedObj } = this.state\n    const isSelected = selectedObj.line === index && \n                        selectedObj.indexes && \n                          selectedObj.indexes.includes(idx)\n    let isSelectedOne = false\n    let isSelectedTop = false\n    let isSelectedBottom = false\n    let isSelectedSide = false\n    if (isSelected) {\n      if (selectedObj.indexes.length === 1) {\n        isSelectedOne = true\n      } else if (selectedObj.indexes.length >= 1){\n        if (selectedObj.indexes[0] === idx) {\n          isSelectedTop = true\n        } else if (selectedObj.indexes[selectedObj.indexes.length - 1] === idx) {\n          isSelectedBottom = true\n        } else {\n          isSelectedSide = true\n        }\n      }\n    }\n   return { isSelected, isSelectedOne, isSelectedTop, isSelectedBottom, isSelectedSide }\n  }\n\n  onPause = () => {\n    const { paused } = this.state\n    clearInterval(thisTimer)\n    if (paused) {\n      //启动定时\n      thisTimer = setInterval(this.timer, 1000);\n    } \n    this.setState({\n      paused: !paused\n    })\n  }\n\n  onSetHardLevel = (level) => {\n    const { selectedHardLevel: originLevel } = this.state\n    this.setState({\n      selectedHardLevel: level\n    }, () => {\n      if (level != originLevel) {\n        Modal.confirm({\n          title: '您选择列新的难度，要重新开始吗？',\n          cancelText: '下次',\n          okText: '重来',\n          onOk: () => {\n            this.onReset()\n          },\n        })\n      }\n    })\n  }\n\n  onChangeHardLevel = () => {\n    const { selectedHardLevel: originLevel } = this.state\n    let keys = Object.keys(hardLevelObj)\n    let index = keys.indexOf('' + originLevel)\n    if (index === 0) {\n      index = 1\n    } else if (index === keys.length - 1) {\n      index = 0\n    } else {\n      index += 1\n    }\n    this.setState({\n      selectedHardLevel: keys[index]\n    })\n  }\n\n  onReset = () => {\n    clearInterval(thisTimer)\n    cardIndex = 0\n    onceError = false\n    thisTime = 0\n    score = 0\n    clickMore = 0\n    successTimes = 0\n    this.setState({\n      selectedObj: {},\n      cardTable: getOriginCardTable(),\n      originData: [],\n      useTime: originUseTime,\n    }, () => {\n      this.getOriginData()\n    })\n  }\n  \n  render() {\n\n    let { cardTable, originData, selectedObj, useTime, paused, selectedHardLevel } = this.state\n    const thisStyle = { width: imgWidth, height: imgHeight }\n    const isMobile = !isPC()\n\n    const menu = (\n      <Menu>\n        {\n          Object.keys(hardLevelObj).map(item => (\n            <Menu.Item \n              onClick={()=>this.onSetHardLevel(item)} \n              key={item} \n              className={classNames({'active': selectedHardLevel == item})}\n            >\n              {hardLevelObj[item]['name']}\n            </Menu.Item>\n          ))\n        }\n      </Menu>\n    );\n\n    return (\n      <>\n      <div className='spider-container'>\n      <div className='spider-top'>\n        <span className='left-show'>\n          <span className='spider-score'>\n            <span>分数：</span>\n            <span className='spider-value'>{score}</span>\n          </span>\n          <span className='spider-time'>\n            <span>用时：</span>\n            <span className='spider-value'>{useTime}</span>\n          </span>\n        </span>\n        \n        <span className='right-btns'>\n          {\n            isMobile ?\n            <Button \n              shape='round' \n              size='small'\n              onClick={this.onChangeHardLevel}\n            >\n              {hardLevelObj[selectedHardLevel]['name'] }\n            </Button>\n            :\n            <Dropdown \n              overlay={menu} \n              placement='bottomCenter' \n              overlayClassName='hard-dropdown'\n            >\n              <Button \n                shape='round' \n                size='small'\n              >\n                {hardLevelObj[selectedHardLevel]['name'] }\n              </Button>\n            </Dropdown>\n          }\n        \n          <Button \n            type='primary' \n            shape='round' \n            size='small'\n            onClick={this.onPause}\n          >\n            {paused ? '继续' : '暂停'}\n          </Button>\n          <Button \n            type='danger' \n            shape='round' \n            className='reset' \n            size='small'\n            onClick={this.onReset}\n          >\n            重来\n          </Button>\n        </span>\n      </div>\n      {/* <div id='test' style={{ overflow: 'scroll', minHeight: 400, maxHeight: 'calc(100vw - 24px)' }}> */}\n      <div \n        className='spider-wrap' \n        ref={ref=>this.spiderWrap=ref} \n        style={{ paddingTop: wrapPaddingTop, paddingLeft: wrapPaddingLeft }}\n      > \n        {\n          paused &&\n          <div className='pause-mask' onClick={this.onPause}>\n            <PauseCircleOutlined />\n          </div>\n        }\n        {\n          tenArr.map((item, index) => (\n            <div \n              key={item} \n              className='card-bg'\n              data-line={index}\n              data-index={-1}\n              style={{\n                ...thisStyle,\n                left: getLeft(index),\n                top: getTop(0),\n                position: 'absolute'\n              }}\n            >\n            </div>\n          ))\n        }\n        {\n            originData.map((item, index) => {\n              let _item = item.show ? item.cardNum : 'back'\n              let left = postCardLeft \n              if (index >= firstShowNum) {\n                left = postCardLeft - 6 * Math.floor((index - firstShowNum) / 10)\n              }\n              return (\n                <span\n                  key={index}\n                  id={`card-v${index}`}\n                  data-line={-1}\n                  data-index={-1}\n                  data-type='origin'\n                  style={{\n                    ...thisStyle,\n                    position: \"absolute\",\n                    left,\n                    top: postCardTop,\n                    zIndex: left,\n                    transition: `top ${annimationDuration}s, left ${annimationDuration}s`\n                  }}\n                  className={classNames(\n                    `origin-card card cardv${_item}`,\n                  )}\n                ></span>\n              )\n            })\n          }\n          {\n            successTimes === cardPacks &&\n            <div className='next-game'>\n              <Button type='primary' shape='round' onClick={this.onReset}>下一局</Button>\n            </div>\n          }\n        </div>\n      </div>\n      {/* </div> */}\n      </>\n    )\n  }\n}\n\nexport default SpiderCard","import React from 'react';\nimport Spider from './spider/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Spider />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from  './App'\nimport 'antd/dist/antd.css'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}